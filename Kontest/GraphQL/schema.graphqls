type ACSubmissionNum {
  count: Int
  difficulty: String
}

type Badge {
  name: String
}

""" Represents a single contest entry in CodeChef's contest history"""
type CodeChefContest {
  code: String!

  """ The end date of the contest"""
  color: String!

  """ The month the contest took place"""
  day: Int!

  """ The name of the contest"""
  endDate: String!

  """ The year the contest took place"""
  month: Int!

  """ The rank achieved in the contest"""
  name: String!

  """ The reason for the rating change (e.g., penalties)"""
  penalisedIn: Boolean!

  """ The rating achieved in the contest"""
  rank: Int!

  """ Indicates if the user was penalized in the contest"""
  rating: Int!

  """ The day the contest took place"""
  reason: String!

  """ The unique code for the contest"""
  year: Int!
}

""" Type for CodeChef queries"""
type CodeChefQuery {
  """ Fetch information about a CodeChef user"""
  user(username: String!): CodeChefUser

  """ Fetch the contest history for a CodeChef user"""
  userKontestHistory(username: String!): [CodeChefContest]
}

""" Object representing a CodeChef user's information"""
type CodeChefUser {
  """ The user's highest rating achieved"""
  countryFlag: String!

  """ URL to the user's country flag image"""
  countryName: String!

  """ The user's global rank"""
  countryRank: Int!

  """ The user's name"""
  currentRating: Int!

  """ The name of the user's country"""
  globalRank: Int!

  """ The number of stars the user has earned"""
  heatMap: [HeatMapEntry!]

  """ The user's current rating"""
  highestRating: Int!

  """ URL to the user's profile"""
  name: String!

  """ Indicates if the user data was fetched successfully"""
  profile: String!

  """ The user's rank within their country"""
  stars: String!
  success: Boolean!
}

""" Type for CodeForces queries"""
type CodeForcesQuery {
  """ Fetch basic information about a CodeForces user"""
  user(username: String!): CodeForcesUser

  """ Fetch the contest history for a CodeForces user"""
  userContestHistory(username: String!): [CodeForcesUserRating!]
}

""" Object representing basic information about a CodeForces user"""
type CodeForcesUser {
  """ The user's handle/username"""
  avatar: String!
  contribution: Int!

  """ Last online time in seconds since epoch"""
  friendOfCount: Int!

  """ URL to the user's title photo"""
  handle: String!

  """ The user's contribution score"""
  lastOnlineTimeSeconds: Int!

  """ Current rank of the user"""
  maxRank: String

  """ Current rating of the user"""
  maxRating: Int

  """ Maximum rating achieved by the user"""
  rank: String

  """ Registration time in seconds since epoch"""
  rating: Int

  """ URL to the user's avatar"""
  registrationTimeSeconds: Int!

  """ Number of friends the user has"""
  titlePhoto: String!
}

""" Object representing a CodeForces user rating update"""
type CodeForcesUserRating {
  contestId: Int!

  """ Unique ID of the contest"""
  contestName: String!

  """ Name of the contest"""
  handle: String!

  """ User's rating before the contest"""
  newRating: Int!

  """ Time of the rating update in seconds since epoch"""
  oldRating: Int!

  """ The user's handle/username"""
  rank: Int!

  """ The rank achieved in the contest"""
  ratingUpdateTimeSeconds: Int!
}

type Contest {
  startTime: String
  title: String
}

type ContestBadge {
  expired: Boolean
  hoverText: String
  icon: String
  name: String
}

type DailyCodingChallengeQuestion {
  date: String
  link: String
  question: Question
  userStatus: String
}

""" Represents each entry in the heat map"""
type HeatMapEntry {
  date: String!

  """ The date of the heat map entry"""
  value: Int!
}

type Kontest {
  endTime: String
  location: String
  name: String
  startTime: String
  url: String
}

type KontestQuery {
  health: String
  kontests(page: Int!, perPage: Int!, sites: [String]): Kontests
  supportedSites: [String]
}

type Kontests {
  kontests: [Kontest]
}

type LanguageProblemCount {
  languageName: String
  problemsSolved: Int
}

type LeetcodeQuery {
  activeDailyCodingChallengeQuestion: DailyCodingChallengeQuestion
  matchedUser(username: String!): MatchedUser
  userContestRanking(username: String!): UserContestRanking
  userContestRankingHistory(username: String!): [UserContestRankingHistory]
}

type LoginResponse {
  jwtToken: String!
  refreshToken: String!
  userId: String!
}

input LoginUserInput {
  deviceId: String!
  email: String!
  password: String!
}

type MatchedUser {
  contestBadge: ContestBadge
  githubUrl: String
  languageProblemCount: [LanguageProblemCount]
  linkedinUrl: String
  problemsSolvedBeatsStats: [ProblemSolvedBeatsStats]
  profile: UserProfile
  submitStatsGlobal: SubmitStatsGlobal
  twitterUrl: String
  username: String
}

type Mutation {
  deleteUser(userId: String!): String!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  makeAdmin(userID: String!): String!
  makeNormal(userID: String!): String!
  refresh(refreshTokenInput: RefreshTokenInput!): LoginResponse!
  register(registerUserInput: RegisterUserInput!): String!
  resetPassword(newPassword: String!): String!
  purge: String
}

type ProblemSolvedBeatsStats {
  difficulty: String
  percentage: Float
}

""" The main query type for fetching user data from CodeChef and CodeForces
"""
type Query {
  kontestQuery: KontestQuery

  """ Query to fetch CodeChef user data by username"""
  codeChefQuery: CodeChefQuery

  """ Query to fetch CodeForces user data by username"""
  codeForcesQuery: CodeForcesQuery
  leetcodeQuery: LeetcodeQuery
}

extend type Query {
  activeDailyCodingChallengeQuestion: DailyCodingChallengeQuestion
  userContestRanking(username: String!): UserContestRanking
  userContestRankingHistory(username: String!): [UserContestRankingHistory]
  matchedUser(username: String!): MatchedUser
}

type Question {
  acRate: Float
  difficulty: String
  freqBar: String
  hasSolution: Boolean
  hasVideoSolution: Boolean
  isFavor: Boolean
  isPaidOnly: Boolean
  questionFrontendId: String
  status: String
  title: String
  titleSlug: String
  topicTags: [TopicTag]
}

input RefreshTokenInput {
  refreshToken: String!
}

input RegisterUserInput {
  email: String!
  password: String!
}

type SubmitStatsGlobal {
  acSubmissionNum: [ACSubmissionNum]
}

type TopicTag {
  id: String
  name: String
  slug: String
}

type UserContestRanking {
  attendedContestsCount: Int
  badge: Badge
  globalRanking: Int
  rating: Float
  topPercentage: Float
  totalParticipants: Int
}

type UserContestRankingHistory {
  attended: Boolean
  contest: Contest
  finishTimeInSeconds: Int
  problemsSolved: Int
  ranking: Int
  rating: Float
  totalProblems: Int
  trendDirection: String
}

type UserProfile {
  aboutMe: String
  categoryDiscussCount: Int
  categoryDiscussCountDiff: Int
  company: String
  countryName: String
  jobTitle: String
  postViewCount: Int
  postViewCountDiff: Int
  ranking: Int
  realName: String
  reputation: Int
  reputationDiff: Int
  school: String
  skillTags: [String]
  solutionCount: Int
  solutionCountDiff: Int
  userAvatar: String
  websites: [String]
}