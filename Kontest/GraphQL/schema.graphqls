








# My Schema

type ACSubmissionNum {
  count: Int
  difficulty: String
}
type Badge {
  name: String
}
" Object representing a CodeChef user's information"
type CodeChefUser {
  countryFlag: String!
  countryName: String!
  countryRank: Int!
  currentRating: Int!
  globalRank: Int!
  heatMap: [HeatMapEntry!]!
  highestRating: Int!
  name: String!
  profile: String!
  stars: String!
  success: Boolean!
}
"""
Codeforces API schema
Object representing a CodeForces user's information
"""
type CodeForcesUser {
  result: CodeForcesUserInfo
}
" Object representing basic information about a CodeForces user"
type CodeForcesUserBasicInfo {
  avatar: String!
  contribution: Int!
  friendOfCount: Int!
  handle: String!
  lastOnlineTimeSeconds: Int!
  maxRank: String
  maxRating: Int
  rank: String
  rating: Int
  registrationTimeSeconds: Int!
  titlePhoto: String!
}
" Object representing each result in the CodeForces user info response"
type CodeForcesUserInfo {
  basicInfo: CodeForcesUserBasicInfo
  " Basic information about the user"
  ratings: [CodeForcesUserRating!]
}
" Object representing a CodeForces user rating update"
type CodeForcesUserRating {
  contestId: Int!
  contestName: String!
  handle: String!
  newRating: Int!
  oldRating: Int!
  rank: Int!
  ratingUpdateTimeSeconds: Int!
}
type Contest {
  startTime: String
  title: String
}
type ContestBadge {
  expired: Boolean
  hoverText: String
  icon: String
  name: String
}
type DailyCodingChallengeQuestion {
  date: String
  link: String
  question: Question
  userStatus: String
}
" Object representing each entry in the heat map"
type HeatMapEntry {
  date: String!
  " The date of the heat map entry"
  value: Int!
}
type Kontest {
  endTime: String
  location: String
  name: String
  startTime: String
  url: String
}
type KontestError {
  message: String
}
type KontestQuery {
  health: String
  kontests(page: Int!, perPage: Int!, sites: [String]): KontestsResult
  supportedSites: [String]
}
type Kontests {
  kontests: [Kontest]
}
type LanguageProblemCount {
  languageName: String
  problemsSolved: Int
}
type LeetcodeQuery {
  activeDailyCodingChallengeQuestion: DailyCodingChallengeQuestion
  matchedUser(username: String!): MatchedUser
  userContestRanking(username: String!): UserContestRanking
  userContestRankingHistory(username: String!): [UserContestRankingHistory]
}
type MatchedUser {
  contestBadge: ContestBadge
  githubUrl: String
  languageProblemCount: [LanguageProblemCount]
  linkedinUrl: String
  problemsSolvedBeatsStats: [ProblemSolvedBeatsStats]
  profile: UserProfile
  submitStatsGlobal: SubmitStatsGlobal
  twitterUrl: String
  username: String
}
type Mutation {
  purge: String
}
type ProblemSolvedBeatsStats {
  difficulty: String
  percentage: Float
}
type Query {
  kontestQuery: KontestQuery
  " Query to fetch CodeChef user data by username"
  getCodeChefUser(username: String!): CodeChefUser
  " Query to fetch CodeForces user data by username"
  getCodeForcesUser(username: String!): CodeForcesUser
  leetcodeQuery: LeetcodeQuery
}
type Question {
  acRate: Float
  difficulty: String
  freqBar: String
  hasSolution: Boolean
  hasVideoSolution: Boolean
  isFavor: Boolean
  isPaidOnly: Boolean
  questionFrontendId: String
  status: String
  title: String
  titleSlug: String
  topicTags: [TopicTag]
}
type SubmitStatsGlobal {
  acSubmissionNum: [ACSubmissionNum]
}
type TopicTag {
  id: String
  name: String
  slug: String
}
type UserContestRanking {
  attendedContestsCount: Int
  badge: Badge
  globalRanking: Int
  rating: Float
  topPercentage: Float
  totalParticipants: Int
}
type UserContestRankingHistory {
  attended: Boolean
  contest: Contest
  finishTimeInSeconds: Int
  problemsSolved: Int
  ranking: Int
  rating: Float
  totalProblems: Int
  trendDirection: String
}
type UserProfile {
  aboutMe: String
  categoryDiscussCount: Int
  categoryDiscussCountDiff: Int
  company: String
  countryName: String
  jobTitle: String
  postViewCount: Int
  postViewCountDiff: Int
  ranking: Int
  realName: String
  reputation: Int
  reputationDiff: Int
  school: String
  skillTags: [String]
  solutionCount: Int
  solutionCountDiff: Int
  userAvatar: String
  websites: [String]
}
union KontestsResult = KontestError | Kontests





extend type Query {
    activeDailyCodingChallengeQuestion: DailyCodingChallengeQuestion
    matchedUser(username: String!): MatchedUser
    userContestRanking(username: String!): UserContestRanking
    userContestRankingHistory(username: String!): [UserContestRankingHistory]
}
